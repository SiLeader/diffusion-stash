//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "generated_product")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub mime_type: String,
    pub positive_prompt: Option<String>,
    pub negative_prompt: Option<String>,
    pub sampler_name: Option<String>,
    pub scheduler_name: Option<String>,
    pub step_count: Option<i32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub cfg_scale: Option<f32>,
    pub seed: Option<i64>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::generated_product_model_association::Entity")]
    GeneratedProductModelAssociation,
}

impl Related<super::generated_product_model_association::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GeneratedProductModelAssociation.def()
    }
}

impl Related<super::ai_model::Entity> for Entity {
    fn to() -> RelationDef {
        super::generated_product_model_association::Relation::AiModel.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::generated_product_model_association::Relation::GeneratedProduct
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
