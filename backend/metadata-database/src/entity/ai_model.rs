//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::ModelCategoryEnum;
use super::sea_orm_active_enums::ModelTypeEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ai_model")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub file_name: String,
    pub category: Option<ModelCategoryEnum>,
    pub model_type: Option<ModelTypeEnum>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::generated_product_model_association::Entity")]
    GeneratedProductModelAssociation,
}

impl Related<super::generated_product_model_association::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GeneratedProductModelAssociation.def()
    }
}

impl Related<super::generated_product::Entity> for Entity {
    fn to() -> RelationDef {
        super::generated_product_model_association::Relation::GeneratedProduct.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::generated_product_model_association::Relation::AiModel
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
